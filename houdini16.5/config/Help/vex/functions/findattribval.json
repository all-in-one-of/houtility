{"body": [{"indent": 0, "text": ["findattribval"], "type": "title", "level": 0}, {"indent": 0, "type": "summary", "text": ["Finds a primitive/point/vertex that has a certain attribute value."]}, {"body": [{"indent": 0, "role": "item", "type": "usage", "text": [" ", {"text": ["int findattribval( <geometry>, string attribclass, string attribute_name, int|string value, int which=0)"], "type": "code"}]}], "container": true, "role": "item_group", "type": "usage_group"}, {"body": [{"body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."]}, {"type": "para", "indent": 4, "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"text": [".bgeo"], "type": "code"}, ") to read from. When running inside Houdini, this can be an ", {"text": ["op:/path/to/sop"], "type": "code"}, " reference."]}], "indent": 0, "text": [{"text": ["<geometry>"], "type": "code"}], "role": "item", "attrs": {"id": "geometry"}, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "text": ["One of ", {"text": ["\"detail\""], "type": "code"}, " (or ", {"text": ["\"global\""], "type": "code"}, "), ", {"text": ["\"point\""], "type": "code"}, ", ", {"text": ["\"prim\""], "type": "code"}, ", or ", {"text": ["\"vertex\""], "type": "code"}, "."]}, {"indent": 4, "type": "para", "text": ["You can also use ", {"text": ["\"primgroup\""], "type": "code"}, ", ", {"text": ["\"pointgroup\""], "type": "code"}, " or ", {"text": ["\"vertexgroup\""], "type": "code"}, " to ", {"text": ["read from groups"], "fullpath": "/vex/groups", "scheme": null, "type": "link", "value": "/vex/groups"}, "."]}], "indent": 0, "text": {"text": {"text": ["attribclass"], "type": "code"}, "type": "code"}, "role": "item", "attrs": {"id": "attribclass"}, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "text": ["The name of the attribute (or intrinsic) to read."]}], "indent": 0, "text": {"text": {"text": ["attribute_name"], "type": "code"}, "type": "code"}, "role": "item", "attrs": {"id": "attribname"}, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "text": ["The value to look for in the attribute."]}], "indent": 0, "role": "item", "type": "arg", "text": {"text": ["value"], "type": "code"}}, {"body": [{"indent": 4, "type": "para", "text": ["If multiple elements have the given value in the attribute, the controls which match to return."]}, {"indent": 4, "type": "para", "text": ["If you're searching for multiple elements with the same attribute value, you can use ", {"text": "", "value": "/vex/functions/findattribvalcount", "fallback_text": "findattribvalcount()", "fullpath": "/vex/functions/findattribvalcount", "scheme": "Vex", "type": "link"}, " to get the total number of matches and then iterate through them by increasing the ", {"text": ["which"], "type": "code"}, " argument to this function in a loop. See the examples below."]}], "indent": 0, "role": "item", "type": "arg", "text": {"text": ["which"], "type": "code"}}, {"body": [{"indent": 4, "type": "para", "text": ["The number of the first point/primitive/vertex where the named attribute matches the given ", {"text": ["value"], "type": "code"}, ". Returns ", {"text": ["-1"], "type": "code"}, " if no element has the given attribute value."]}], "indent": 0, "returns": true, "role": "item", "type": "arg"}], "container": true, "role": "item_group", "type": "arg_group"}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["The most common use cases (finding an point/primitive by its ", {"text": ["name"], "type": "code"}, " or ", {"text": ["id"], "type": "code"}, " attribute) have easier-to-use dedicated wrapper functions: ", {"text": "", "value": "/vex/functions/nametopoint", "fallback_text": "nametopoint()", "fullpath": "/vex/functions/nametopoint", "scheme": "Vex", "type": "link"}, ", ", {"text": "", "value": "/vex/functions/nametoprim", "fallback_text": "nametoprim()", "fullpath": "/vex/functions/nametoprim", "scheme": "Vex", "type": "link"}, ", ", {"text": "", "value": "/vex/functions/idtopoint", "fallback_text": "idtopoint()", "fullpath": "/vex/functions/idtopoint", "scheme": "Vex", "type": "link"}, ", and ", {"text": "", "value": "/vex/functions/idtoprim", "fallback_text": "idtoprim()", "fullpath": "/vex/functions/idtoprim", "scheme": "Vex", "type": "link"}, "."]}], "indent": 0, "role": "item", "type": "tip"}], "container": true, "role": "item_group", "type": "tip_group"}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "text": ["You can only search for integer or string values."]}], "container": true, "type": "bullet_group"}, {"body": [{"body": [{"body": [{"lang": "vex", "indent": 4, "type": "pre", "text": ["\n    int prim_num = findattribval(0, \"prim\", \"id\", 10);\n    // Note: you can use idtoprim(0, 10) instead\n    "]}], "indent": 0, "role": "item", "type": "box", "text": ["Find the primitive with ", {"text": ["@id"], "type": "code"}, " == 10"]}, {"body": [{"lang": "vex", "indent": 4, "type": "pre", "text": ["\n    int count = findattribvalcount(0, \"point\", \"age\", 10);\n    int point_num;\n    for (int i = 0; i < count; i++) {\n        point_num = findattribval(0, \"point\", \"age\", 10, i);\n        // ...do something with the point...\n    }\n    "]}], "indent": 0, "role": "item", "type": "box", "text": ["Find all points with ", {"text": ["@age"], "type": "code"}, " == 10"]}], "container": true, "role": "item_group", "type": "box_group"}], "indent": 0, "level": 1, "text": "Examples", "role": "section", "container": true, "type": "examples_section", "id": "examples"}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/nametopoint", "fallback_text": "nametopoint()", "fullpath": "/vex/functions/nametopoint", "scheme": "Vex", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/nametoprim", "fallback_text": "nametoprim()", "fullpath": "/vex/functions/nametoprim", "scheme": "Vex", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/idtopoint", "fallback_text": "idtopoint()", "fullpath": "/vex/functions/idtopoint", "scheme": "Vex", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/idtoprim", "fallback_text": "idtoprim()", "fullpath": "/vex/functions/idtoprim", "scheme": "Vex", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/findattribvalcount", "fallback_text": "findattribvalcount()", "fullpath": "/vex/functions/findattribvalcount", "scheme": "Vex", "type": "link"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "container": true, "type": "related_section", "id": "related"}], "title": ["findattribval"], "summary": ["Finds a primitive/point/vertex that has a certain attribute value."], "attrs": {"showtags": "true", "group": "attrib", "type": "vex", "context": "all", "tags": "attrib, search"}, "included": ["/vex/functions/_common"], "type": "root"}