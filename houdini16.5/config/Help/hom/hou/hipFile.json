{"body": [{"indent": 0, "text": [{"text": "hou.", "type": "supertitle"}, "hipFile"], "type": "title", "level": 0}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["Return only the filename portion of the current hip file."]}], "indent": 0, "text": [{"text": ["basename()"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::basename"}, "type": "functions_item", "id": "basename"}, {"body": [{"indent": 4, "type": "para", "text": ["Return the name of the current hip file."]}, {"indent": 4, "type": "para", "text": ["This function may or may not return a full path. If it\u2019s a relative path,\n    then it is relative to ", {"text": ["os.getcwd()"], "type": "code"}, ". If you need to always get a full\n    path, use ", {"fragment": "#path", "text": "", "value": "/hom/hou/hipFile#path", "fallback_text": "hou.hipFile.path", "fullpath": "/hom/hou/hipFile#path", "scheme": "Hom", "type": "link"}, " instead."]}], "indent": 0, "text": [{"text": ["name()"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::name"}, "type": "functions_item", "id": "name"}, {"body": [{"indent": 4, "type": "para", "text": ["Return a full path to the current hip file."]}], "indent": 0, "text": [{"text": ["path()"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::path"}, "type": "functions_item", "id": "path"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns whether the current Houdini session has been modified since\n    it was last saved.  This function only works in a graphical session.\n    In a non-graphical session it will always return True."]}], "indent": 0, "text": [{"text": ["hasUnsavedChanges()"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::hasUnsavedChanges"}, "type": "functions_item", "id": "hasUnsavedChanges"}, {"body": [{"indent": 4, "type": "para", "text": ["Loads a hip file."]}, {"indent": 4, "type": "para", "text": ["If suppress_save_prompt is ", {"text": ["False"], "type": "code"}, ", the function acts as if the\n    file was loaded via ", {"text": ["File \u25b8 Open\u2026"], "type": "ui"}, ". It prompts you to save the\n    current file before loading the new file and displays any load errors in\n    a pop-up window. It also changes the name of the current file at the top\n    of the main window and adds the file name to the list of most recently\n    used files."]}, {"indent": 4, "type": "para", "text": ["If the UI is not available (for example, if you run the function from\n    hython), the suppress_save_prompt parameter is ignored and non-\n    interactive load is always performed."]}, {"indent": 4, "type": "para", "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the file to\n    be loaded does not exist or cannot be opened. The same exception will\n    also be raised if the method is called during shutting down or\n    loading/saving a hip file. In each case, the exception instance message\n    will reflect the failure reason."]}, {"indent": 4, "type": "para", "text": ["Raises ", {"text": "", "value": "/hom/hou/LoadWarning", "fallback_text": "hou.LoadWarning", "fullpath": "/hom/hou/LoadWarning", "scheme": "Hom", "type": "link"}, " if warnings are\n    generated during load and ", {"text": ["ignore_load_warnings"], "type": "code"}, " is ", {"text": ["False"], "type": "code"}, ". \n    The instance message will contain the warning text."]}], "indent": 0, "text": [{"text": ["load(file_name, suppress_save_prompt=False, ignore_load_warnings=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::load", "replaces": "/commands/mread"}, "type": "functions_item", "id": "load"}, {"body": [{"indent": 4, "type": "para", "text": ["Saves the current session to a hip file."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["The name or path to the file that will be written.  If you attempt to\n        save a file to a directory that does not exist, the directory will be\n        created.  If this parameter is ", {"text": ["None"], "type": "code"}, ", Houdini will use the current hip\n        file path."]}], "indent": 4, "type": "dt", "text": [{"text": ["file_name"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "text": ["Whether Houdini will add this file to the contents of the ", {"text": ["File \u25b8 Open\n        Recent Files"], "type": "ui"}, " list.  This parameter is ignored when this function is\n        called from a non-graphical session."]}], "indent": 4, "type": "dt", "text": [{"text": ["save_to_recent_files"], "type": "code"}]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the target file or directory cannot be\n    created or if other errors occur during save.  The same exception will also\n    be raised if the method is called during shutting down or loading/saving a\n    hip file. In each case, the exception instance message will reflect the\n    failure reason."]}], "indent": 0, "text": [{"text": ["save(file_name=None, save_to_recent_files=True)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::save", "replaces": "/commands/mwrite"}, "type": "functions_item", "id": "save"}, {"body": [{"indent": 4, "type": "para", "text": ["Changes the name of the current session for the next time it is saved to\n    a hip file."]}, {"indent": 4, "type": "para", "text": [{"text": ["file_name"], "type": "code"}, " can either be an absolute or relative file path. If it\u2019s\n    relative, then it is interpreted as being relative to ", {"text": ["os.getcwd()"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "text": ["If the user subsequently chooses ", {"text": ["File \u25b8 Save"], "type": "ui"}, ", Houdini saves to a hip\n    file with this name.  Note that this function does not actually save the\n    hip file.  To both set the name of the current session and save it to a hip\n    file, use ", {"fragment": "#save", "text": "", "value": "/hom/hou/hipFile#save", "fallback_text": "hou.hipFile.save", "fullpath": "/hom/hou/hipFile#save", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["setName(file_name)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::setName"}, "type": "functions_item", "id": "setName"}, {"body": [{"indent": 4, "type": "para", "text": ["Saves the current session to a hip file, automatically incrementing\n    the file name."]}, {"indent": 4, "type": "para", "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the target\n    file or directory cannot be created or if other errors occur during\n    save. The same exception will also be raised if the method is called\n    during shutting down or loading/saving a hip file. In each case, the\n    exception instance message will reflect the failure reason."]}], "indent": 0, "text": [{"text": ["saveAndIncrementFileName()"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::saveAndIncrementFileName", "replaces": "/commands/mwrite"}, "type": "functions_item", "id": "saveAndIncrementFileName"}, {"body": [{"indent": 4, "type": "para", "text": ["Creates a numbered backup from the current session."]}, {"indent": 4, "type": "para", "text": ["If a file with the same name as the current backup already exists, then\n    the backup is renamed to contain the next number in the sequence before\n    saving. The backup files are saved in the directory set in the\n    environment variable ", {"text": ["HOUDINI_BACKUP_DIR"], "type": "code"}, ". If ", {"text": ["HOUDINI_BACKUP_DIR"], "type": "code"}, " is not\n    set, then a default relative directory called \"backup\" is used."]}, {"indent": 4, "type": "para", "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the target\n    file or directory cannot be created or if other errors occur during\n    save. The same exception will also be raised if the method is called\n    during shutting down or loading/saving a hip file. In each case, the\n    exception instance message will reflect the failure reason."]}], "indent": 0, "text": [{"text": ["saveAsBackup()"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::saveAsBackup", "replaces": "/commands/mwrite"}, "type": "functions_item", "id": "saveAsBackup"}, {"body": [{"indent": 4, "type": "para", "text": ["This function replaces the current session with an empty session."]}, {"indent": 4, "type": "para", "text": ["If ", {"text": ["suppress_save_prompt"], "type": "code"}, " is set to ", {"text": ["False"], "type": "code"}, ", the method acts as ", {"text": ["File \u25b8 New"], "type": "ui"}, " in an interactive session. It prompts you to save the current file\n    before clearing. Otherwise, the session is cleared non-interactively: no\n    prompts appear and any changes are discarded."]}, {"indent": 4, "type": "para", "text": ["If the UI is not available (for example, if you run the method from\n    hython), the suppress_save_prompt parameter is ignored and non-\n    interactive clear is always performed."]}], "indent": 0, "text": [{"text": ["clear(suppress_save_prompt=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::clear", "replaces": "/commands/mnew"}, "type": "functions_item", "id": "clear"}, {"body": [{"indent": 4, "type": "para", "text": ["Merges the given file into the current hip file. The nodes to merge in\n    are indicated by the node_pattern parameter."]}, {"indent": 4, "type": "para", "text": ["If ", {"text": ["overwrite_on_conflict"], "type": "code"}, " is ", {"text": ["True"], "type": "code"}, ", the method will\n    overwrite nodes with the same name as nodes in the merge file."]}, {"indent": 4, "type": "para", "text": ["This method will raise a hou.OperationFailed exception if the file to\n    be merged into the current one does not exist or cannot be opened. The\n    same exception will also be raised if the method is called during\n    shutting down or loading/saving a hip file. In each case, the exception\n    instance message will reflect the failure reason."]}, {"indent": 4, "type": "para", "text": ["This method will raise a hou.LoadWarning exception if warnings are\n    generated during merge and ", {"text": ["ignore_load_warnings"], "type": "code"}, " is ", {"text": ["False"], "type": "code"}, ". The instance\n    message will contain the warning text."]}], "indent": 0, "text": [{"text": ["merge(file_name, node_pattern=\"*\", overwrite_on_conflict=False, ignore_load_warnings=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::merge", "replaces": "/commands/mread"}, "type": "functions_item", "id": "merge"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns the Nodes that would collide if a merge was performed with the\n    specified node_pattern."]}, {"indent": 4, "type": "para", "text": ["The result is a tuple of all Nodes in the merge file satisfying the\n    node_pattern and having the same name as any of the existing nodes."]}, {"indent": 4, "type": "para", "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the file to\n    be used in the collision check does not exist, cannot be opened, or is\n    not a valid hip file. The same exception will also be thrown if the\n    method is called during shutting down or loading/saving a hip file. In\n    each case, the exception instance message will reflect the failure\n    reason."]}], "indent": 0, "text": [{"text": ["collisionNodesIfMerged(file_name, node_pattern=\"*\")"], "type": "code"}, "  \u2192 tuple of ", {"text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::collisionNodesIfMerged"}, "type": "functions_item", "id": "collisionNodesIfMerged"}, {"body": [{"indent": 4, "type": "para", "text": ["Return whether the main application is loading a hip file."]}], "indent": 0, "text": [{"text": ["isLoadingHipFile()"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::isLoadingHipFile", "replaces": "/expressions/opisloading"}, "type": "functions_item", "id": "isLoadingHipFile"}, {"body": [{"indent": 4, "type": "para", "text": ["Return whether the main application is shutting down."]}], "indent": 0, "text": [{"text": ["isShuttingDown()"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::isShuttingDown", "replaces": "/expressions/opisquitting"}, "type": "functions_item", "id": "isShuttingDown"}, {"body": [], "indent": 0, "text": [{"text": ["setOnSaveCallback(callback)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_hipFile::setOnSaveCallback"}, "type": "functions_item", "id": "setOnSaveCallback"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns a dictionary of color overrides for the viewport group list.\n    The viewport group list automatically assigns colors to groups based on a\n    hash of the group name. The group color table is a dictionary of overrides\n    to these default color assignments. This allows particular important\n    groups to be assigned distinctive colors. The group color table is saved\n    with the hip file. The color table can be modified with\n    ", {"fragment": "#setGroupColorTable", "text": "", "value": "/hom/hou/hipFile#setGroupColorTable", "fallback_text": "hou.hipFile.setGroupColorTable", "fullpath": "/hom/hou/hipFile#setGroupColorTable", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["groupColorTable()"], "type": "code"}, "  \u2192 ", {"text": ["dict"], "type": "code"}, " of ", {"text": ["str"], "type": "code"}, " to ", {"text": "", "value": "/hom/hou/Color", "fallback_text": "hou.Color", "fullpath": "/hom/hou/Color", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::groupColorTable"}, "type": "functions_item", "id": "groupColorTable"}, {"body": [{"indent": 4, "type": "para", "text": ["Sets a dictionary of color overrides for the viewport group list.\n    The viewport group list automatically assigns colors to groups based on a\n    hash of the group name. The group color table is a dictionary of overrides\n    to these default color assignments. This allows particular important\n    groups to be assigned distinctive colors. The group color table is saved\n    with the hip file. The current color table can be queried with\n    ", {"fragment": "#groupColorTable", "text": "", "value": "/hom/hou/hipFile#groupColorTable", "fallback_text": "hou.hipFile.groupColorTable", "fullpath": "/hom/hou/hipFile#groupColorTable", "scheme": "Hom", "type": "link"}, "."]}, {"indent": 4, "type": "para", "text": ["The supplied ", {"text": ["color_table"], "type": "code"}, " must be a ", {"text": ["dict"], "type": "code"}, " of ", {"text": ["str"], "type": "code"}, " to ", {"text": "", "value": "/hom/hou/Color", "fallback_text": "hou.Color", "fullpath": "/hom/hou/Color", "scheme": "Hom", "type": "link"}, ". The\n    following example will cause groups names 'special_group' to appear with a\n    red overlay:"]}, {"lang": "python", "indent": 4, "type": "pre", "text": ["\n    color_table = { 'special_group' : hou.Color([1,0,0]) }\n    hou.hipFile.setGroupColorTable(color_table)\n    "]}], "indent": 0, "text": [{"text": ["setGroupColorTable(color_table)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::setGroupColorTable"}, "type": "functions_item", "id": "setGroupColorTable"}, {"body": [{"indent": 4, "type": "para", "text": ["Return the save mode of the current scene, either ", {"fragment": "#Binary", "text": "", "value": "/hom/hou/saveMode#Binary", "fallback_text": "hou.saveMode.Binary", "fullpath": "/hom/hou/saveMode#Binary", "scheme": "Hom", "type": "link"}, "\n    or ", {"fragment": "#Text", "text": "", "value": "/hom/hou/saveMode#Text", "fallback_text": "hou.saveMode.Text", "fullpath": "/hom/hou/saveMode#Text", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["saveMode(self)"], "type": "code"}, "  \u2192 ", {"text": "", "value": "/hom/hou/saveMode", "fallback_text": "hou.saveMode", "fullpath": "/hom/hou/saveMode", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::saveMode"}, "type": "functions_item", "id": "saveMode"}, {"body": [{"indent": 4, "type": "para", "text": ["Set the save mode of the current scene to either ", {"fragment": "#Binary", "text": "", "value": "/hom/hou/saveMode#Binary", "fallback_text": "hou.saveMode.Binary", "fullpath": "/hom/hou/saveMode#Binary", "scheme": "Hom", "type": "link"}, " or\n    ", {"fragment": "#Text", "text": "", "value": "/hom/hou/saveMode#Text", "fallback_text": "hou.saveMode.Text", "fullpath": "/hom/hou/saveMode#Text", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["setSaveMode(self, save_mode)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::setSaveMode"}, "type": "functions_item", "id": "setSaveMode"}, {"body": [{"indent": 4, "type": "para", "text": ["Imports an FBX file with various options. It is recommended to always call this function with keyword arguments. Please see the ", {"text": ["__File > Import > Filmbox FBX__ "], "fullpath": "/hom/hou/ /ref/windows/import_fbx", "scheme": null, "type": "link", "value": " /ref/windows/import_fbx"}, " dialog help for a description of the options."]}, {"indent": 4, "type": "para", "text": ["If suppress_save_prompt is ", {"text": ["False"], "type": "code"}, ", the function acts as if the\n    file was loaded via ", {"text": ["File \u25b8 Open\u2026"], "type": "ui"}, ". It prompts you to save the\n    current file before loading the new file and displays any load errors in\n    a pop-up window. It also changes the name of the current file at the top\n    of the main window and adds the file name to the list of most recently\n    used files."]}, {"indent": 4, "type": "para", "text": ["If the UI is not available (for example, if you run the function from\n    hython), the suppress_save_prompt parameter is ignored and non-\n    interactive load is always performed."]}, {"indent": 4, "type": "para", "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the file to\n    be loaded does not exist or cannot be opened. The same exception will\n    also be raised if the method is called during shutting down or\n    loading/saving a hip file. In each case, the exception instance message\n    will reflect the failure reason."]}, {"indent": 4, "type": "para", "text": ["This function returns a tuple consisting the parent subnet node of the\n    imported FBX nodes (or ", {"text": ["hou.node('/obj')"], "type": "code"}, " if ", {"text": ["import_into_object_subnet"], "type": "code"}, " is\n    ", {"text": ["False"], "type": "code"}, ") and a string containing the generated load messages."]}], "indent": 0, "text": [{"text": ["importFBX(file_name, suppress_save_prompt=False, merge_into_scene=True, import_cameras=True, import_joints_and_skin=True, import_geometry=True, import_lights=True, import_animation=True, import_materials=True, resample_animation=False, resample_interval=1.0, override_framerate=False,framerate=-1, hide_joints_attached_to_skin=True, convert_joints_to_zyx_rotation_order=False, material_mode=hou.fbxMaterialMode.FBXShaderNodes, compatibility_mode=hou.fbxCompatibilityMode.Maya, single_precision_vertex_caches=False, triangulate_nurbs=False, triangulate_patches=False, import_global_ambient_light=False, import_blend_deformers_as_blend_sops=False, segment_scale_already_baked_in=True, convert_file_paths_to_relative=True, unlock_geometry=False, unlock_deformations=False, import_nulls_as_subnets=False, import_into_object_subnet=True, convert_into_y_up_coordinate_system=False)"], "type": "code"}, "  \u2192 (", {"text": "", "value": "/hom/hou/ObjNode", "fallback_text": "hou.ObjNode", "fullpath": "/hom/hou/ObjNode", "scheme": "Hom", "type": "link"}, ", ", {"text": ["str"], "type": "code"}, ")"], "role": "item", "attrs": {"cppname": "HOM_hipFile::importFBX", "replaces": "/commands/fbximport"}, "type": "functions_item", "id": "importFBX"}, {"body": [{"indent": 4, "type": "para", "text": ["Register a Python callback to be called whenever a .hip file event occurs\n    (i.e. file load, file save)."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["Any callable Python object that expects one argument.\n        The argument is an ", {"text": "", "value": "/hom/hou/hipFileEventType", "fallback_text": "hou.hipFileEventType", "fullpath": "/hom/hou/hipFileEventType", "scheme": "Hom", "type": "link"}, " enum value."]}], "indent": 4, "type": "dt", "text": ["callback"]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "text": ["See ", {"fragment": "#scene_events", "text": ["how to write a scene event callback"], "value": "/hom/locations#scene_events", "fullpath": "/hom/locations#scene_events", "scheme": null, "type": "link"}, " for more information."]}, {"lang": "python", "indent": 4, "type": "pre", "text": ["\n    def scene_event_callback(event_type):\n        hou.ui.displayMessage(\"An event of type {} occured\".format(event_type))\n\n    hou.hipFile.addEventCallback(scene_event_callback)\n    "]}], "indent": 0, "text": [{"text": ["addEventCallback(self, callback)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::addEventCallback"}, "type": "functions_item", "id": "addEventCallback"}, {"body": [{"indent": 4, "type": "para", "text": ["Remove a Python callback that was previously registered with\n    ", {"fragment": "#addEventCallback", "text": "", "value": "/hom/hou/hipFile#addEventCallback", "fallback_text": "hou.hipFile.addEventCallback", "fullpath": "/hom/hou/hipFile#addEventCallback", "scheme": "Hom", "type": "link"}, ".  See ", {"fragment": "#addEventCallback", "text": "", "value": "/hom/hou/hipFile#addEventCallback", "fallback_text": "hou.hipFile.addEventCallback", "fullpath": "/hom/hou/hipFile#addEventCallback", "scheme": "Hom", "type": "link"}, "\n    for more information."]}, {"indent": 4, "type": "para", "text": ["Raises ", {"text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the callback was not previously\n    registered."]}], "indent": 0, "text": [{"text": ["removeEventCallback(callback)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::removeEventCallback"}, "type": "functions_item", "id": "removeEventCallback"}, {"body": [{"indent": 4, "type": "para", "text": ["Remove all Python callbacks that have been registered with\n    ", {"fragment": "#addEventCallback", "text": "", "value": "/hom/hou/hipFile#addEventCallback", "fallback_text": "hou.hipFile.addEventCallback", "fullpath": "/hom/hou/hipFile#addEventCallback", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["clearEventCallbacks()"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_hipFile::clearEventCallbacks"}, "type": "functions_item", "id": "clearEventCallbacks"}, {"body": [{"indent": 4, "type": "para", "text": ["Return a tuple of all the Python callbacks that have been registered with\n    ", {"fragment": "#addEventCallback", "text": "", "value": "/hom/hou/hipFile#addEventCallback", "fallback_text": "hou.hipFile.addEventCallback", "fullpath": "/hom/hou/hipFile#addEventCallback", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["eventCallbacks()"], "type": "code"}, "  \u2192 ", {"text": ["tuple"], "type": "code"}, " of callback"], "role": "item", "attrs": {"cppname": "HOM_hipFile::eventCallbacks"}, "type": "functions_item", "id": "eventCallbacks"}], "container": true, "role": "item_group", "type": "functions_item_group"}], "indent": 0, "level": 1, "text": "Functions", "role": "section", "container": true, "type": "functions_section", "id": "functions"}], "type": "root", "attrs": {"cppname": "HOM_hipFile", "type": "hommodule", "group": "general"}, "title": [{"text": "hou.", "type": "supertitle"}, "hipFile"]}