{"body": [{"indent": 0, "text": ["cracktransform"], "type": "title", "level": 0}, {"indent": 0, "type": "summary", "text": ["Depending on the value of c, returns the translate (c=0), rotate\n(c=1), scale (c=2), or shears (c=3)  component of the transform (xform)."]}, {"body": [{"indent": 0, "role": "item", "type": "usage", "text": [" ", {"text": ["vector cracktransform(int trs, int xyz, int c, vector pivot, vector pivot_rotate, matrix xform)"], "type": "code"}]}, {"indent": 0, "role": "item", "type": "usage", "text": [" ", {"text": ["vector cracktransform(int trs, int xyz, int c, vector pivot, matrix xform)"], "type": "code"}]}], "container": true, "role": "item_group", "type": "usage_group"}, {"indent": 0, "type": "para", "text": ["Depending on the value of ", {"text": ["c"], "type": "var"}, ", returns the translate (", {"text": ["c=0"], "type": "code"}, "), rotate\n(", {"text": ["c=1"], "type": "code"}, "), scale (", {"text": ["c=2"], "type": "code"}, ") or shears (", {"text": ["c=3"], "type": "code"}, ") component of the transform (", {"text": ["xform"], "type": "var"}, "). The\nfunction uses the given transform and rotation orders (", {"text": ["trs"], "type": "var"}, " and\n", {"text": ["xyz"], "type": "var"}, ") , the given pivot point (", {"text": ["pivot"], "type": "var"}, ") and optional pivot rotation (", {"text": ["pr"], "type": "var"}, ") to calculate the return\nvalue. The specifications for the ", {"text": ["trs"], "type": "var"}, " and ", {"text": ["xyz"], "type": "var"}, " parameters can be\nfound in ", {"text": ["$HFS/houdini/vex/include/math.h"], "type": "code"}, "."]}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["Rotation angles (when ", {"text": ["c=1"], "type": "code"}, ") are returned in degrees, whereas many other VEX functions use radians.\n    You can use the ", {"text": ["radians"], "value": "/vex/functions/radians", "fallback_text": "radians()", "fullpath": "/vex/functions/radians", "scheme": "Vex", "type": "link"}, " VEX function to convert the vector of angles in degrees to a vector of angles in radians.\n    For example: ", {"text": ["vector angles = radians(cracktransform(XFORM_TRS, XFORM_XYZ, 1, {0,0,0}, M));"], "type": "code"}]}], "indent": 0, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}, {"body": [{"indent": 0, "role": "item", "type": "usage", "text": [" ", {"text": ["void cracktransform(int trs, int xyz, vector pivot, vector pivot_rotate, matrix xform, vector &t, vector &r, vector &s, vector &shears)"], "type": "code"}]}], "container": true, "role": "item_group", "type": "usage_group"}, {"indent": 0, "type": "para", "text": ["Returns the translate, rotate, scale, and shear components of ", {"text": ["xform"], "type": "var"}, " in ", {"text": ["t"], "type": "var"}, ", ", {"text": ["r"], "type": "var"}, ", ", {"text": ["s"], "type": "var"}, ", and ", {"text": ["shears"], "type": "var"}, ", respectively.\nIf more than one component is needed, using this overload is more efficient than making multiple calls to the other function signature."]}, {"body": [{"indent": 0, "role": "item", "type": "usage", "text": [" ", {"text": ["void cracktransform(int trs, int xyz, vector pivot, matrix xform, vector &t, vector &r, vector &s)"], "type": "code"}]}], "container": true, "role": "item_group", "type": "usage_group"}, {"indent": 0, "type": "para", "text": ["Returns the translate, rotate, and scale of ", {"text": ["xform"], "type": "var"}, " in ", {"text": ["t"], "type": "var"}, ", ", {"text": ["r"], "type": "var"}, ", ", {"text": ["s"], "type": "var"}, " respectively.\nThis overload doesn\u2019t support pivot_rotate or shears.\nIf more than one component is needed, using this overload is more efficient than making multiple calls to the other function signature."]}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/quaternion", "fallback_text": "quaternion()", "fullpath": "/vex/functions/quaternion", "scheme": "Vex", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/polardecomp", "fallback_text": "polardecomp()", "fullpath": "/vex/functions/polardecomp", "scheme": "Vex", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/eulertoquaternion", "fallback_text": "eulertoquaternion()", "fullpath": "/vex/functions/eulertoquaternion", "scheme": "Vex", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/qconvert", "fallback_text": "qconvert()", "fullpath": "/vex/functions/qconvert", "scheme": "Vex", "type": "link"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "container": true, "type": "related_section", "id": "related"}], "summary": ["Depending on the value of c, returns the translate (c=0), rotate\n(c=1), scale (c=2), or shears (c=3)  component of the transform (xform)."], "type": "root", "attrs": {"showtags": "true", "group": "convert", "type": "vex", "context": "all", "tags": "math, matrix"}, "title": ["cracktransform"]}