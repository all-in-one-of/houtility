{"body": [{"indent": 0, "text": ["Volume Mix"], "type": "title", "level": 0}, {"indent": 0, "type": "summary", "text": ["Combines the scalar fields of volume primitives."]}, {"indent": 0, "type": "para", "text": ["The Volume Mix operation manipulates the scalar data associated with\nvolume primitives. For each pair of volume primitives in the source\ngroup and the mix group, the given calculation is performed and the\nresults stored in the source group\u2019s primitive. Note that the volumes do\nnot need to have the same orientation or resolution, the second volume\nwill be sampled at the orientation and resolution of the first volume."]}, {"indent": 0, "type": "para", "text": ["The copy mode allows you to resample a volume into a different\nresolution or orientation."]}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "text": ["The volume primitives to be used from the first input."]}], "indent": 4, "role": "item", "type": "parameters_item", "text": ["Source Group"]}, {"body": [{"indent": 8, "type": "para", "text": ["The volume primitives to merge in from the second input.  If\n        there is no second input, this group will be found from the\n        first input."]}], "indent": 4, "role": "item", "type": "parameters_item", "text": ["Mix Group"]}, {"body": [{"indent": 8, "type": "para", "text": ["Each voxel of each volume primitive in the source group will be\n        mixed with the corresponding voxel of the corresponding volume\n        primitive of the mix group according to this mix method. A\n        refers to the first input\u2019s value, B refers to the second\n        input\u2019s value. If there is no second input, B will be found\n        from the corresponding volume of the first input."]}, {"body": [{"body": [{"indent": 12, "type": "para", "text": ["result = B"]}], "indent": 8, "type": "dt", "text": ["Copy"]}, {"body": [{"indent": 12, "type": "para", "text": ["result = A + B"]}], "indent": 8, "type": "dt", "text": ["Add"]}, {"body": [{"indent": 12, "type": "para", "text": ["result = A - B"]}], "indent": 8, "type": "dt", "text": ["Subtract"]}, {"body": [{"indent": 12, "type": "para", "text": ["result = abs(A - B)"]}], "indent": 8, "type": "dt", "text": ["Diff"]}, {"body": [{"indent": 12, "type": "para", "text": ["result = A * B"]}], "indent": 8, "type": "dt", "text": ["Multiply"]}, {"body": [{"indent": 12, "type": "para", "text": ["result = A / B"]}], "indent": 8, "type": "dt", "text": ["Divide"]}, {"body": [{"indent": 12, "type": "para", "text": ["result = -A"]}], "indent": 8, "type": "dt", "text": ["Invert"]}, {"body": [{"indent": 12, "type": "para", "text": ["result = max(A, B)"]}], "indent": 8, "type": "dt", "text": ["Max"]}, {"body": [{"indent": 12, "type": "para", "text": ["result = min(A, B)"]}], "indent": 8, "type": "dt", "text": ["Min"]}, {"body": [{"indent": 12, "type": "para", "text": ["result = clamp(A, rangemin, rangemax)"]}], "indent": 8, "type": "dt", "text": ["Clamp"]}, {"body": [{"indent": 12, "type": "para", "text": ["result = A ", {"text": [" (1-blend) + B "], "type": "strong"}, " blend"]}], "indent": 8, "type": "dt", "text": ["Blend"]}, {"body": [{"indent": 12, "type": "para", "text": ["result = Value Expression"]}], "indent": 8, "type": "dt", "text": ["User"]}], "container": true, "type": "dt_group"}], "indent": 4, "role": "item", "type": "parameters_item", "text": ["Mix Method"]}, {"body": [{"indent": 8, "type": "para", "text": ["Defines the range to which the volume\u2019s voxel values will be\n        clamped when the mix method is set to Clamp."]}], "indent": 4, "role": "item", "type": "parameters_item", "text": ["Range"]}, {"body": [{"indent": 8, "type": "para", "text": ["Defines the mixing of the two volumes in Blend mode.  0 will\n        use the first volume, 1 will use the second volume."]}], "indent": 4, "role": "item", "type": "parameters_item", "text": ["Blend"]}, {"body": [{"indent": 8, "type": "para", "text": ["Each voxel each volume primitive of the source group will be\n        directly assigned this value if the mix method is set to User.\n        The expression can use local variables to allow for arbitrary\n        expressions."]}, {"body": [{"body": [{"indent": 12, "type": "para", "text": ["It can be considerably faster to use a Volume Vop to\n            manipulate the volume than an expression."]}], "indent": 8, "role": "item", "type": "tip"}], "container": true, "role": "item_group", "type": "tip_group"}], "indent": 4, "role": "item", "type": "parameters_item", "text": ["Value"]}, {"body": [{"indent": 8, "type": "para", "text": ["The ", {"text": ["A"], "type": "code"}, " in the calculation is set to ", {"text": ["A' = A * m + a"], "type": "code"}, ", where ", {"text": ["m"], "type": "code"}, " is the\n        Dest Pre-Mul and a the Dest Pre-Add."]}, {"indent": 8, "type": "para", "text": ["This does not support per-voxel local variables."]}], "indent": 4, "role": "item", "type": "parameters_item", "text": ["Dest Pre-Add, Dest Pre-Mul"]}, {"body": [{"indent": 8, "type": "para", "text": ["The ", {"text": ["B"], "type": "code"}, " in the calculation is set to ", {"text": ["B' = B * m + a"], "type": "code"}, ", where ", {"text": ["m"], "type": "code"}, " is the\n        Source Pre-Mul and a the Source Pre-Add."]}, {"indent": 8, "type": "para", "text": ["This does not support per-voxel local variables."]}], "indent": 4, "role": "item", "type": "parameters_item", "text": ["Source Pre-Add, Source Pre-Mul"]}, {"body": [{"indent": 8, "type": "para", "text": ["The ", {"text": ["result"], "type": "code"}, " that the destination field is set to is modified\n        by ", {"text": ["result' = result * m + a,"], "type": "code"}, " where ", {"text": ["m"], "type": "code"}, " is the Post-Mul and a\n        is the Post-Add."]}, {"indent": 8, "type": "para", "text": ["This does not support per-voxel local variables."]}], "indent": 4, "role": "item", "type": "parameters_item", "text": ["Post-Add, Post-Mul"]}, {"body": [{"indent": 8, "type": "para", "text": ["The final result is then clamped optionally to these ranges."]}, {"indent": 8, "type": "para", "text": ["This does not support per-voxel local variables."]}], "indent": 4, "role": "item", "type": "parameters_item", "text": ["Clamp Minimum, Maximum"]}, {"body": [{"indent": 8, "type": "para", "text": ["If the destination is a VDB, it is only changd in the activated\n        regions.  This option will pre-activate all the regions that overlap\n        with activated regions of the mix VDB.  This only applies when both\n        primitives being mixed are VDBs."]}], "indent": 4, "role": "item", "type": "parameters_item", "text": ["Expand VDB Active Region"]}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "container": true, "type": "parameters_section", "id": "parameters"}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "text": ["Position in space of the voxel being processed."]}], "indent": 4, "type": "dt", "text": ["X, Y, Z"]}, {"body": [{"indent": 8, "type": "para", "text": ["Index of the voxel being processed."]}], "indent": 4, "type": "dt", "text": ["IX, IY, IZ"]}, {"body": [{"indent": 8, "type": "para", "text": ["Value of the volume from the first input."]}], "indent": 4, "type": "dt", "text": ["V"]}, {"body": [{"indent": 8, "type": "para", "text": ["Value of the volume from the second input."]}], "indent": 4, "type": "dt", "text": ["V2"]}, {"body": [{"indent": 8, "type": "para", "text": ["Relative location of the voxel in terms of the first input."]}], "indent": 4, "type": "dt", "text": ["BBX, BBY, BBZ"]}, {"body": [{"indent": 8, "type": "para", "text": ["Relative location of the voxel in terms of the second input."]}], "indent": 4, "type": "dt", "text": ["BBX2, BBY2, BBZ2"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 1, "text": "Locals", "role": "section", "container": true, "type": "locals_section", "id": "locals"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": "", "fullpath": "/nodes/sop/volumevop", "scheme": "Node", "type": "link", "value": "/nodes/sop/volumevop"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": "", "fullpath": "/nodes/sop/volumemerge", "scheme": "Node", "type": "link", "value": "/nodes/sop/volumemerge"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": "", "fullpath": "/nodes/sop/isooffset", "scheme": "Node", "type": "link", "value": "/nodes/sop/isooffset"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": "", "fullpath": "/nodes/sop/iso", "scheme": "Node", "type": "link", "value": "/nodes/sop/iso"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "container": true, "type": "related_section", "id": "related"}], "summary": ["Combines the scalar fields of volume primitives."], "type": "root", "attrs": {"version": null, "tags": "volumes, merge", "namespace": null, "internal": "volumemix", "context": "sop", "type": "node", "icon": "SOP/volumemix"}, "title": ["Volume Mix"]}